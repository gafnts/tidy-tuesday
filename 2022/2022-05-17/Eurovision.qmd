# Eurovision

```{r}
pacman::p_load(tidyverse, magrittr, here)
```

### Import and wrangling

```{r}
votes_raw <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision-votes.csv") %>% 
  transmute(year,
           event = factor(semi_final),
           vote_type = factor(str_to_lower(jury_or_televoting)),
           from = factor(from_country),
           to = factor(to_country),
           points)
```

```{r}
# Votes by type of event in 2022
votes <- 
  votes_raw %>% 
  filter(year == 2022) %>% 
  select(-year) %>% 
  pivot_wider(names_from = event, values_from = points) %>% 
  arrange(from, to, vote_type) %>% 
  relocate(from, to, vote_type) %>% 
  mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>% 
  group_by(from, to) %>% 
  summarise(
    semi_one = sum(sf1),
    semi_two = sum(sf2),
    final = sum(f)
  ) %>% 
  ungroup()
```

```{r}
# Top 15 most voted countries
countries <- 
  votes %>% 
  select(to, final) %>% 
  group_by(to) %>% 
  summarise(total = sum(final)) %>% 
  arrange(desc(total)) %>% 
  head(15) %>% 
  mutate(to = as.character(to)) %>% 
  pull(to)
```

```{r}
# Long relative weight matrix 
weights <- 
  votes %>% 
  filter(from %in% countries & to %in% countries) %>% 
  select(from, to, final) %>% 
  pivot_wider(names_from = to, values_from = final) %>% 
  mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>% 
  rowwise() %>% 
  mutate(total = sum(c_across(where(is.numeric)))) %>% 
  mutate(across(where(is.numeric), ~ .x / total)) %>% 
  select(-total) %>% 
  pivot_longer(-from, names_to = "key") %>% 
  drop_na()
```

### Chord diagram

```{r}
pacman::p_load(circlize, chorddiag, viridis, patchwork, hrbrthemes)
```

```{r}
# Params
circos.clear()
circos.par(start.degree = 90, 
           gap.degree = 4, 
           track.margin = c(-0.1, 0.1), 
           points.overflow.warning = FALSE)
par(mar = rep(0, 4))

color <- viridis(15, alpha = 1, begin = 0, end = 1, option = "D")
color <- mycolor[sample(1:15)]
```

```{r}
# Base plot
chordDiagram(
  x = weights, 
  grid.col = color,
  transparency = 0.15,
  directional = 1,
  direction.type = c("arrows", "diffHeight"), 
  diffHeight  = 0,
  annotationTrackHeight = c(0.15, 0.1),
  link.arr.type = "big.arrow", 
  link.sort = TRUE, 
  link.largest.ontop = TRUE
  )
```

```{r}
png("my_plot.png", width = 1920, height = 1080) 

# Base plot
chordDiagram(
  x = weights, 
  grid.col = mycolor,
  transparency = 0.25,
  directional = 1,
  direction.type = c("arrows", "diffHeight"), 
  diffHeight  = 0,
  annotationTrackHeight = c(0.15, 0.1),
  link.arr.type = "big.arrow", 
  link.sort = TRUE, 
  link.largest.ontop = TRUE
  )

dev.off()
```
