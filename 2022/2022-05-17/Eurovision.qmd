# Eurovision

```{r}
pacman::p_load(tidyverse, magrittr, here)
```

### Import and wrangling

```{r}
votes_raw <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision-votes.csv") %>% 
  transmute(year,
           event = factor(semi_final),
           vote_type = factor(str_to_lower(jury_or_televoting)),
           from = factor(from_country),
           to = factor(to_country),
           points)
```

```{r}
votes <- 
  votes_raw %>% 
  filter(year == 2022) %>% 
  select(-year) %>% 
  pivot_wider(names_from = event, values_from = points) %>% 
  arrange(from, to, vote_type) %>% 
  relocate(from, to, vote_type) %>% 
  mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>% 
  group_by(from, to) %>% 
  summarise(
    semi_one = sum(sf1),
    semi_two = sum(sf2),
    final = sum(f)
  ) %>% 
  ungroup()
```

```{r}
weights <- 
  votes %>% 
  select(from, to, final) %>% 
  pivot_wider(names_from = to, values_from = final) %>% 
  mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>% 
  rowwise() %>% 
  mutate(total = sum(c_across(where(is.numeric)))) %>% 
  mutate(across(where(is.numeric), ~ .x / total)) %>% 
  select(-total, -c(Albania:`San Marino`)) %>% 
  pivot_longer(-from, names_to = "key") %>% 
  drop_na()
```

### Chord diagram

```{r}
pacman::p_load(viridis, patchwork, hrbrthemes, circlize, chorddiag)
```

```{r}
# parameters
circos.clear()
circos.par(start.degree = 90, 
           gap.degree = 4, 
           track.margin = c(-0.1, 0.1), 
           points.overflow.warning = FALSE)
par(mar = rep(0, 4))

# color palette
mycolor <- viridis(10, alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:40)]

# Base plot
chordDiagram(
  x = weights, 
  grid.col = mycolor,
  transparency = 0.25,
  directional = 1,
  direction.type = c("arrows", "diffHeight"), 
  diffHeight  = -0.04,
  annotationTrack = "grid", 
  annotationTrackHeight = c(0.05, 0.1),
  link.arr.type = "big.arrow", 
  link.sort = TRUE, 
  link.largest.ontop = TRUE)

# Add text and axis
circos.trackPlotRegion(
  track.index = 1, 
  bg.border = NA, 
  panel.fun = function(x, y) {
    
    xlim = get.cell.meta.data("xlim")
    sector.index = get.cell.meta.data("sector.index")
    
    # Add names to the sector. 
    circos.text(
      x = mean(xlim), 
      y = 3.2, 
      labels = sector.index, 
      facing = "bending", 
      cex = 0.8
      )

    # Add graduation on axis
    circos.axis(
      h = "top", 
      major.at = seq(from = 0, 
                     to = xlim[2], 
                     by = ifelse(test = xlim[2]>10, yes = 2, no = 1)), 
      minor.ticks = 1, 
      labels.niceFacing = FALSE)
  }
)
```
